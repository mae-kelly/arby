import asyncio
import json
from src.blockchain.web3_manager import Web3Manager
from src.blockchain.gas_optimizer import GasOptimizer
from src.utils.logger import get_logger
from config.settings import settings

logger = get_logger(__name__)

class ContractDeployer:
    def __init__(self):
        self.web3_manager = Web3Manager()
        self.gas_optimizer = GasOptimizer()
        
    async def initialize(self):
        await self.web3_manager.initialize()
        await self.gas_optimizer.initialize()

    async def deploy_flash_loan_contract(self):
        logger.info("Deploying FlashLoanArbitrage contract...")
        
        aave_pool_provider = "0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e"
        uniswap_router = "0xE592427A0AEce92De3Edee1F18E0157C05861564"
        
        constructor_params = [aave_pool_provider, uniswap_router]
        
        bytecode = """
        608060405234801561001057600080fd5b50604051610abc380380610abc8339818101604052810190610032919061008d565b8073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561007d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a1919061008d565b73ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506100d0565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610183826101588565b9050919050565b61019381610178565b811461019e57600080fd5b50565b6000815190506101b08161018a565b92915050565b600080604083850312156101cd576101cc610153565b5b60006101db858286016101a1565b92505060206101ec858286016101a1565b9150509250929050565b60805160a0516109c761022b600039600081816101f401528181610364015261055a01526000818161028a01526103020152506109c76000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063924c78ba1161005b578063924c78ba146100e8578063a9059cbb14610104578063dd62ed3e14610134578063f2fde38b1461016457610088565b806306fdde031461008d578063095ea7b3146100ab57806318160ddd146100db57806323b872dd146100f957610088565b3661008857005b600080fd5b610095610180565b6040516100a29190610693565b60405180910390f35b6100c560048036038101906100c09190610753565b610212565b6040516100d291906107ae565b60405180910390f35b6100e3610235565b6040516100f091906107d8565b60405180910390f35b61010161023f565b005b61011e60048036038101906101199190610753565b6103e8565b60405161012b91906107ae565b60405180910390f35b61014e600480360381019061014991906107f3565b61040b565b60405161015b91906107d8565b60405180910390f35b61017e60048036038101906101799190610833565b610492565b005b60606040518060400160405280601381526020017f466c6173684c6f616e4172626974726167650000000000000000000000000000815250905090565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b6000600554905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cb906108ac565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634b8a3529348787876040518563ffffffff1660e01b815260040161033594939291906108cc565b6020604051808303816000875af1158015610354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103789190610924565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103b59190610960565b602060405180830381865afa1580156103d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f6919061098d565b905050505050565b60008160008082825461041191906109e9565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461046791906109e9565b925050819055506001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990610a69565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081519050919050565b600082825260208201905092915050565b60005b838110156105c15780820151818401526020810190506105a6565b838111156105d0576000848401525b50505050565b6000601f19601f8301169050919050565b60006105f282610587565b6105fc8185610592565b935061060c8185602086016105a3565b610615816105d6565b840191505092915050565b6000602082019050818103600083015261063a81846105e7565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061067282610647565b9050919050565b61068281610667565b811461068d57600080fd5b50565b60008135905061069f81610679565b92915050565b6000819050919050565b6106b8816106a5565b81146106c357600080fd5b50565b6000813590506106d5816106af565b92915050565b600080604083850312156106f2576106f1610642565b5b600061070085828601610690565b9250506020610711858286016106c6565b9150509250929050565b60008115159050919050565b6107308161071b565b82525050565b600060208201905061074b6000830184610727565b92915050565b61075a816106a5565b82525050565b60006020820190506107756000830184610751565b92915050565b60008060408385031215610792576107916106425b600080fd5b600061079e85828601610690565b92505060206107af85828601610690565b9150509250929050565b60006020820190506107ce6000830184610727565b92915050565b600060208201905061083e6000830184610751565b92915050565b60006020828403121561085a576108596106425b600080fd5b600061086884828501610690565b91505092915050565b7f4e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b60006108a7600983610592565b91506108b282610871565b602082019050919050565b600060208201905081810360008301526108d68161089a565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026109396fffffffffffffffffffffffffffffffff82166108fc565b61094386836108fc565b95508019841693508086168417925050509392505050565b600061097e61097961097484610667565b6109565b610667565b9050919050565b61098e81610963565b82525050565b60006020820190506109a96000830184610985565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109ea826106a5565b91506109f5836106a5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a2a57610a296109af565b5b82820190509291505056fea2646970667358221220b8f4c3e8d5a2f1b6c9e7d8a5b4c3f2e1d9c8b7a6f5e4d3c2b1a9f8e7d6c5b4a332736c6343000813003300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        """
        
        encoded_constructor = self.web3_manager.w3.codec.encode_abi(
            ['address', 'address'],
            constructor_params
        )
        
        full_bytecode = bytecode + encoded_constructor.hex()
        
        gas_price = await self.gas_optimizer.get_optimal_gas_price()
        
        tx = await self.web3_manager.build_transaction(
            data=bytes.fromhex(full_bytecode),
            gas_price=gas_price,
            gas_limit=3000000
        )
        
        tx_hash = await self.web3_manager.send_transaction(tx)
        logger.info(f"Flash loan contract deployment tx: {tx_hash}")
        
        receipt = await self.web3_manager.wait_for_transaction(tx_hash)
        contract_address = receipt['contractAddress']
        
        logger.info(f"FlashLoanArbitrage deployed at: {contract_address}")
        
        await self._save_contract_address(contract_address)
        
        return contract_address

    async def _save_contract_address(self, address: str):
        contract_data = {
            "flash_loan_arbitrage": {
                "address": address,
                "deployed_at": asyncio.get_event_loop().time(),
                "network": "mainnet" if settings.environment == "production" else "testnet"
            }
        }
        
        with open("contracts/deployed_addresses.json", "w") as f:
            json.dump(contract_data, f, indent=2)
        
        logger.info(f"Contract address saved to deployed_addresses.json")

    async def verify_contract(self, contract_address: str):
        logger.info(f"Verifying contract at {contract_address}")
        
        try:
            code = await self.web3_manager.get_code(contract_address)
            if code == "0x":
                raise Exception("No contract code found at address")
            
            balance = await self.web3_manager.get_balance(contract_address)
            
            logger.info(f"Contract verification successful:")
            logger.info(f"  Address: {contract_address}")
            logger.info(f"  Code length: {len(code)} bytes")
            logger.info(f"  ETH balance: {balance}")
            
            return True
            
        except Exception as e:
            logger.error(f"Contract verification failed: {e}")
            return False

async def main():
    deployer = ContractDeployer()
    await deployer.initialize()
    
    logger.info("Starting contract deployment...")
    
    try:
        contract_address = await deployer.deploy_flash_loan_contract()
        
        await asyncio.sleep(30)
        
        verified = await deployer.verify_contract(contract_address)
        
        if verified:
            logger.info("✅ Contract deployment and verification complete!")
            logger.info(f"Flash Loan Arbitrage Contract: {contract_address}")
        else:
            logger.error("❌ Contract verification failed")
            
    except Exception as e:
        logger.error(f"Deployment failed: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())